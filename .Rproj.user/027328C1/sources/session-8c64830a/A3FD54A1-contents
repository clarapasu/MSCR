---
title: "Simulations"
author: "Clara Panchaud"
date: "2023-11-20"
output: html_document
---

```{r}

library(proxy)
library(fdrtool)
library(secr)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(MASS)
library(numDeriv)
Rcpp::sourceCpp("/Users/clara/Documents/RProjects/SECR_memory/LikelihoodC.cpp")
source("/Users/clara/Documents/RProjects/SECR_memory/Sim_Func.R")
source("/Users/clara/Documents/RProjects/SECR_memory/Fit_Func.R")
#set.seed(1)
```


```{r}
data<-read.csv("pine_martens.csv")
traps<-read.csv("CameraLocations.csv")
remove<-which(is.na(data$FieldSeason))
data<-data[-remove,]
data<-data[data$FieldSeason==2017,]
data<-data[data$IndividualID!=0,] # remove the unmarked individuals
remove<-which(is.na(traps$FieldSeason))
traps<-traps[-remove,]
traps<-traps[traps$FieldSeason==2017,]

traps<- subset(traps, StudyAreaID==3)


traps<-subset(traps, select = c(LocationID,UTM_E,UTM_N))
rownames(traps)<-traps$LocationID
traps<- subset(traps, select = c(UTM_E,UTM_N))
colnames(traps)<-c("x","y")

traps$x<-traps$x/1000
traps$y<-traps$y/1000

trap = make.poly(x=traps$x, y=traps$y)
mask = make.mask(trap,buffer=2,spacing=0.3,type="trapbuffer")
meshmat<-as.matrix(mask)
plot(meshmat,)
points(trap,col="red",pch=19)
K<-30
T<-12
N<-20
```
```{r}
dim(meshmat)
```



```{r}
set.seed(1)
N<-20 #total number of individuals 
sim_mask<-make.mask(traps,buffer=2,spacing=0.05,type="trapbuffer")
sim_mesh<-as.matrix(sim_mask)
Random_rows_1<-sample(nrow(sim_mesh),N)
ac<-sim_mesh[Random_rows_1,]

#set.seed(1)
T<- 12 #Time of last capture
r<-1000 #number of bins in time discretization
m<-1
h0<- 0.5
sigma<- -1.5
beta<- -1	# the larger the beta the closer to secr 
theta<-c(h0,sigma,beta)
K <- 30

trap<-as.matrix(traps)
df_sim<-sim_data(N,T,r,theta,trap,ac,m)
df_sim<-re_id(df_sim,ac)
df_sim$trap_x<-trap[df_sim$y,1]
df_sim$trap_y<-trap[df_sim$y,2]
df_sim<-arrange(df_sim,id,Time)
r2<-10

#time_diff <- c(0, diff(df_sim$Time))
#index_to_remove <- abs(time_diff[-1]) < 0.1 
#thinned_df<-df_sim[!index_to_remove, ]
#df_sim<-thinned_df

n<-length(unique(df_sim$id))
ddf_sim <- data.frame(t = as.numeric(), y = as.integer(), id = as.integer())
  for(i in unique(df_sim$id)){
    data <- discretize(df_sim[df_sim$id == i, ],T, r2)
    data$id <- i
    ddf_sim <- rbind(ddf_sim, data)
  }
ddfmat_sim = as.matrix(ddf_sim)
dfrows_sim = as.numeric(table(ddf_sim$id))
head(df_sim)
df_sim


```

```{r}
LikelihoodC(theta,trap,ddfmat_sim,dfrows_sim,meshmat,T)
theta<-c(-1, 0.01, 0)
T<-12
#n = 77
fit <- optim(theta, LikelihoodC, trap = trap,df = ddfmat_sim, dfrows = dfrows_sim, mesh = meshmat, endt = T, hessian=TRUE)
confint_param(fit,T,trap,meshmat,n)
confint_pop(fit,T,traps,mask,n,distribution = "poisson", loginterval = TRUE, alpha = 0.05)

fit_nomem <- optim(theta[1:2], LikelihoodCnoMem, trap = trap,df = ddfmat_sim, dfrows = dfrows_sim, mesh = meshmat, endt = T, hessian=TRUE)
confint_param(fit_nomem,T,trap,meshmat,n)
confint_pop(fit_nomem,T,traps,mask,n,distribution = "poisson", loginterval = TRUE, alpha = 0.05)
```


```{r}
set.seed(2)
results_bis<-data.frame(matrix(ncol = 24, nrow = 400))

sim_mask<-make.mask(traps,buffer=2,spacing=0.05,type="trapbuffer")
sim_mesh<-as.matrix(sim_mask)
T<- 12 #Time of last capture
r<-1000 #number of bins in time discretization
N<-20 #total number of individuals 
m<-1
h0<- 0.5
sigma<- -1.5
beta<- -1	# the larger the beta the closer to secr 
theta<-c(h0,sigma,beta)
K <- 30
poly_trap = make.poly(x=traps$x, y=traps$y)
mask = make.mask(poly_trap,buffer=2,spacing=0.3,type="trapbuffer")
meshmat<-as.matrix(mask)
trap<-as.matrix(traps)
theta_init<-c(-1, 0.01, 0)
execution_times <- numeric()
execution_times_nm <- numeric()

for (j in 1:400){
  k=100+j
  Random_rows_1<-sample(nrow(sim_mesh),N)
  ac<-sim_mesh[Random_rows_1,]
  
  df_sim<-sim_data(N,T,r,theta,trap,ac,m)
  df_sim<-re_id(df_sim,ac)
  df_sim$trap_x<-trap[df_sim$y,1]
  df_sim$trap_y<-trap[df_sim$y,2]
  df_sim<-arrange(df_sim,id,Time)
  r2<-10
  n<-length(unique(df_sim$id))
  ddf_sim <- data.frame(t = as.numeric(), y = as.integer(), id = as.integer())
    for(i in unique(df_sim$id)){
      data <- discretize(df_sim[df_sim$id == i, ],T, r2)
      data$id <- i
      ddf_sim <- rbind(ddf_sim, data)
    }
  ddfmat_sim = as.matrix(ddf_sim)
  dfrows_sim = as.numeric(table(ddf_sim$id))
  
  start_time <- Sys.time()
  fit <- optim(theta_init, LikelihoodC, trap = trap,df = ddfmat_sim, dfrows = dfrows_sim, mesh = meshmat, endt = T, hessian=TRUE)
    end_time <- Sys.time()
    elapsed_time <- as.numeric(difftime(end_time, start_time, units = "secs"))
    execution_times <- c(execution_times, elapsed_time)

  param<- confint_param(fit,T,trap,meshmat,n)
  N_est<-confint_pop(fit,T,traps,mask,n,distribution = "poisson", loginterval = TRUE, alpha = 0.05)
  
  start_time <- Sys.time()
  fit_nomem <- optim(theta[1:2], LikelihoodCnoMem, trap = trap,df = ddfmat_sim, dfrows = dfrows_sim, mesh = meshmat, endt = T, hessian=TRUE)
  end_time <- Sys.time()
  elapsed_time <-as.numeric(difftime(end_time, start_time, units = "secs"))
  execution_times_nm <- c(execution_times_nm, elapsed_time)
    
  param_nomem<-confint_param(fit_nomem,T,trap,meshmat,n)
  N_est_nomem<-confint_pop(fit_nomem,T,traps,mask,n,distribution = "poisson", loginterval = TRUE, alpha = 0.05)

  data_name <- sprintf("df_%02d.csv", k) 
  write.csv(df_sim,file=data_name)
  
  fit_name <- paste("model_", k, ".RData", sep = "")
  save(fit,file=fit_name)
  
  fit_nomem_name <- paste("model_nm_", k, ".RData", sep = "")
  save(fit_nomem,file=fit_nomem_name)
  
   trap_count<-df_sim %>% 
  group_by(id) %>%
  summarise(y_count = n_distinct(y), na.rm = TRUE)
  
  results_bis[j,]<-c(param$value,param$lower,param$upper,N_est[1],N_est[3:4],param_nomem$value,param_nomem$lower,param_nomem$upper,N_est_nomem[1],N_est_nomem[3:4],n,mean(table(df_sim$id)),mean(trap_count$y_count))
}

write.csv(results_bis,"sim_results_bis.csv")
write.csv(execution_times, file = "execution_times_bis.csv")
write.csv(execution_times_nm, file = "execution_times_nm_bis.csv")

```



```{r}
results<-read.csv("sim_results.csv",row.names = 1)
res<-rbind(results,results_bis)
```

```{r}
mean(res$X22)/20
```


```{r}
res
mean(res$X3)

mean(res$X9-res$X6,na.rm=TRUE)


sum(-1 > res$X6 & -1 <res$X9,na.rm=TRUE)/500
sqrt(sum((res$X3-(-1))^2)/500)
495/500
```



```{r}
category <- rep(c("MCT SCR", "CT SCR"), each = 500)
boxplot_data<-data.frame(value=c(res$X10,res$X19),category)

ggplot(boxplot_data, aes(x = category, y = value, fill = category)) +
  geom_boxplot(fill="grey") +
  labs(title = "",
       x = "Model",
       y = "Estimated N") +
  theme(legend.position="none")+
  geom_hline(yintercept=20, linetype="dashed",size=1.2)
```







